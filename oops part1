{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c93181a2-fbe0-435c-83d7-07b5ff5155db",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1463227033.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn [3], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    1. how to define class and object in python\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "1. how to define class and object in python\n",
    "2. variables in class\n",
    "   instance variable or object variable(done)\n",
    "   local veriable()\n",
    "   class variable\n",
    "3. methods in class\n",
    "   construtor(this is speical methods)(done)\n",
    "   instnace method(done)\n",
    "   class methods\n",
    "   static methods\n",
    "4. encapsulation\n",
    "5. inheritance\n",
    "6. abstraciton\n",
    "7. polymorphism"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6fa24171-60b7-408a-9ae8-fea23afae15d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class emp:\n",
    "    def __init__(self):\n",
    "        print(\"object created!!\")\n",
    "    def test(sunny):\n",
    "        print(\"python is fun\")\n",
    "    def demo(self):\n",
    "        print(\"python rocks\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5ef88eb0-1fb3-4303-bdfc-114e6f64cf30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object created!!\n"
     ]
    }
   ],
   "source": [
    "sudhanshu=emp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ea58d8bc-dec6-45a1-a121-ec3d7547767e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python is fun\n"
     ]
    }
   ],
   "source": [
    "sudhanshu.test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ee17c321-0e72-4bb4-aced-2963cd39ac32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python rocks\n"
     ]
    }
   ],
   "source": [
    "sudhanshu.demo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9c37c88c-dac4-4a2c-8c5b-c872dfc8450e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object created!!\n"
     ]
    }
   ],
   "source": [
    "#object creation\n",
    "sunny=emp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5d3c9d06-31c0-44e2-87cd-67efe1143603",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python is fun\n"
     ]
    }
   ],
   "source": [
    "sunny.test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5c83b5d5-8383-4ff0-9072-94ba4c7d900b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python rocks\n"
     ]
    }
   ],
   "source": [
    "sunny.demo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5b611af5-02c5-4592-8289-a11ed54c1c8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object created!!\n"
     ]
    }
   ],
   "source": [
    "#object creation\n",
    "amit=emp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d4e05f2a-b8a0-48e6-b0a9-56f85e7a68e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object created!!\n"
     ]
    }
   ],
   "source": [
    "#object creation\n",
    "krish=emp()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6b1ca37-87bb-49c1-8d7b-e16ecda103aa",
   "metadata": {},
   "source": [
    "# construtor are those method which will be call immedatily(automatically) whenever we create object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d112237-1e8d-4f40-8485-b5540bd38320",
   "metadata": {},
   "source": [
    "# init is a spacial method in python or constructor which will be called automatically whenever we create a object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9f449f7b-3dc6-4d3e-8b2b-ff5058a1e1d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "class emp():\n",
    "    def __init__(self):\n",
    "        print(\"object created\")\n",
    "    def test():\n",
    "        print(\"tested\")\n",
    "    def demo(self):\n",
    "        print(\"checking\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9699c09a-2d0d-4773-8d41-08f8dc53df6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object created\n"
     ]
    }
   ],
   "source": [
    "sunny=emp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3feb1250-348a-47e5-878d-6a9b670e063c",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "emp.test() takes 0 positional arguments but 1 was given",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [29], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43msunny\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mTypeError\u001b[0m: emp.test() takes 0 positional arguments but 1 was given"
     ]
    }
   ],
   "source": [
    "sunny.test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "28679629-a32e-4ed6-997d-b570bae4b51f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "checking\n"
     ]
    }
   ],
   "source": [
    "sunny.demo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b5b7c0d3-2312-4cb3-987b-1b3d74572348",
   "metadata": {},
   "outputs": [],
   "source": [
    "class emp:\n",
    "    def __init__(self):\n",
    "        self.age=25\n",
    "        self.name=\"Rahul\"\n",
    "        self.salary=25000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c450e2be-d3c8-44a8-9199-4a347c138506",
   "metadata": {},
   "outputs": [],
   "source": [
    "sunny=emp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b315bf12-885d-4942-bd1f-223fe6c8be80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sunny.age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1f435441-af94-4fb2-8308-dd64282f8651",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Rahul'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sunny.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8591772b-c746-4626-b00b-1a808b61d0d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25000"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sunny.salary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b362eb27-9b99-410e-af0a-782cf6393359",
   "metadata": {},
   "outputs": [],
   "source": [
    "rahul=emp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4094ac27-fa42-4c67-bed6-834e7cd63044",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rahul.age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0edb4d68-a656-470d-baf3-686a72a9e5e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Rahul'"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rahul.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ee2f1aaf-1b43-4a1c-914b-50e94b71447d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25000"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rahul.salary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "25148f6d-771f-4aba-80f6-9d76840bbf9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "class emp:\n",
    "    def __init__(self,a,b,c):\n",
    "        self.age=a\n",
    "        self.name=b\n",
    "        self.salary=c\n",
    "    def show(self):\n",
    "        print(self.age,self.name,self.salary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "630bc7c3-9a17-4da0-ac0e-8e25b1de7a11",
   "metadata": {},
   "outputs": [],
   "source": [
    "sunny=emp(25,\"sunny\",3000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8000d33a-4b06-4bef-8699-b7cd94654a40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25 sunny 3000\n"
     ]
    }
   ],
   "source": [
    "sunny.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "ea94ed78-309d-4edf-a4db-894d26a498fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "rajat=emp(26,\"rajat\",30000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0a4b922a-e3d0-45fc-b4eb-3e3443fdf10a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26 rajat 30000\n"
     ]
    }
   ],
   "source": [
    "rajat.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "fe160209-33f4-4009-8f38-7412a44ba5b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "obj3=emp(27,\"satish\",60000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "dc816cd4-f62c-4ab7-86cb-76dc78fbff98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "27 satish 60000\n"
     ]
    }
   ],
   "source": [
    "obj3.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3f951a5e-d2d2-4731-9131-b3174ec3fda5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sunny'"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sunny.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c1c4c9c2-dc28-40ca-8d28-18e3b203b845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3000"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sunny.salary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "5641aa02-f5b2-4d70-8951-a10ca3d8cf4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class car:\n",
    "    def __init__(self,a,b,c):\n",
    "        self.top_speed=a\n",
    "        self.fuel_capacity=b\n",
    "        self.disk_break=c\n",
    "    def show(self):\n",
    "        print(f\"top speed {self.top_speed} fuel_capacity {self.fuel_capacity} disk_break {self.disk_break}\")\n",
    "    def drive(self,x):\n",
    "        print(f\"it can drive {x}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "acc2933d-9703-4e7d-bb60-b9e8a7888e85",
   "metadata": {},
   "outputs": [],
   "source": [
    "audi8=car(350,15,\"yes\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f3a81705-5b50-46e5-9326-822072658d3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "top speed 350 fuel_capacity 15 disk_break yes\n"
     ]
    }
   ],
   "source": [
    "audi8.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "3aa88899-cae2-47ad-946b-13d2d3d27e91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "it can drive very fast\n"
     ]
    }
   ],
   "source": [
    "audi8.drive(\"very fast\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "994d6e9d-0d53-4399-a7aa-6445d5b423fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "maruti800=car(120,8,\"No\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "6c7963f0-448e-4413-8d57-081946ad902f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "top speed 120 fuel_capacity 8 disk_break No\n"
     ]
    }
   ],
   "source": [
    "maruti800.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "293aa4bf-7ed9-4268-9cec-517629346646",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
